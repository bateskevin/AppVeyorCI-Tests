environment:
  access_token:
    secure: 0skQZS3raRtshDg3zZ8vbku0Zi0p5o+AeU0Jr/SQugHK/nA7Y40YOvfNoPb9eTVR

install:
- ps: >-
    Install-PackageProvider -Name NuGet -Force
    
    Install-Module -Name PSScriptAnalyzer -Force
    
    Install-Module -Name Pester -Force -verbose

build: off
test_script:
- ps: >-

    function Update-CodeCoveragePercent {  
    
        [cmdletbinding(supportsshouldprocess)]
        param(
        
            [int]
            $CodeCoverage = 0,

            [string]
            $TextFilePath = ".\Readme.md"
        
        )

        $BadgeColor = switch ($CodeCoverage) {
            {$_ -in 90..100} { 'brightgreen' }
            
            {$_ -in 75..89}  { 'yellow' }
            
            {$_ -in 60..74}  { 'orange' }
            
            default          { 'red' }
        
        }

        if ($PSCmdlet.ShouldProcess($TextFilePath)) {
        
            $ReadmeContent = (Get-Content $TextFilePath)
        
            $ReadmeContent = $ReadmeContent -replace "!\[Test Coverage\].+\)", "![Test Coverage](https://img.shields.io/badge/coverage-$CodeCoverage%25-$BadgeColor.svg?maxAge=60)" 
        
            $ReadmeContent | Set-Content -Path $TextFilePath
        
        }
    
    }

    import-module pester;
    start-sleep -seconds 2;
    Get-Module Pester;
    Get-Module PSMarkdown;
    write-verbose "invoking pester";
    $TestFiles = (Get-ChildItem -Path .\ -Recurse  | ?{$_.name.EndsWith(".ps1") -or $_.name.EndsWith(".psm1") -and $_.name -notmatch ".tests."}).Fullname; 
    $res = Invoke-Pester -Path ".\Tests" -OutputFormat NUnitXml -OutputFile TestsResults.xml -PassThru -CodeCoverage $TestFiles;
    (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestsResults.xml));
    $CoveragePercent = [math]::floor(100 - (($res.CodeCoverage.NumberOfCommandsMissed / $res.CodeCoverage.NumberOfCommandsAnalyzed) * 100));
    Update-CodeCoveragePercent -CodeCoverage $CoveragePercent;
    if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."};
    if($res.FailedCount -eq 0 -and $APPVEYOR_REPO_COMMIT_MESSAGE -match '^.*dep-psgallery$'){
        write-host "Module would now be deployed to the psgallery" -forgroundcolor green;
    }else{
        write-host "Module would not be deployed to the psgallery" -forgroundcolor Yellow;
    }
    
    $manifestpath = ".\"+"$env:APPVEYOR_PROJECT_NAME"+".psd1";
    $manifest = Test-ModuleManifest -Path $manifestPath;
    [System.Version]$version = $manifest.Version;
    [String]$newVersion = New-Object -TypeName System.Version -ArgumentList ($version.Major, $version.Minor, $version.Build, ($version.Revision+1));
    Update-ModuleManifest -Path $manifestPath -ModuleVersion $newVersion;
    
on_success:  
- git config --global credential.helper store
- ps: Add-Content "$HOME\.git-credentials" "https://$($env:GitToken):x-oauth-basic@github.com`n"
- git config --global user.email "build@appveyor.com"
- git config --global user.name "Appveyor"
- git checkout %APPVEYOR_REPO_BRANCH%
- git add *.psd1
- git add *.md
- git commit -m "[skip ci] AppVeyor Build %APPVEYOR_BUILD_VERSION%"
- ps: >-
    try{
    write-host "Test"
    git push -erroraction stop
    }catch{
      write-host "could not push"
    }
